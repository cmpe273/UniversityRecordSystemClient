package connection;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.7.4
 * 2013-05-04T18:24:38.150-07:00
 * Generated source version: 2.7.4
 * 
 */
@WebServiceClient(name = "ServiceService", 
                  wsdlLocation = "Service.wsdl",
                  targetNamespace = "http://connection") 
public class ServiceService extends javax.xml.ws.Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://connection", "ServiceService");
    public final static QName Service = new QName("http://connection", "Service");
    static {
        URL url = ServiceService.class.getResource("Service.wsdl");
        if (url == null) {
            url = ServiceService.class.getClassLoader().getResource("Service.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(ServiceService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "Service.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public ServiceService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ServiceService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns Service
     */
    @WebEndpoint(name = "Service")
    public Service getService() {
        return super.getPort(Service, Service.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service
     */
    @WebEndpoint(name = "Service")
    public Service getService(WebServiceFeature... features) {
        return super.getPort(Service, Service.class, features);
    }

}
